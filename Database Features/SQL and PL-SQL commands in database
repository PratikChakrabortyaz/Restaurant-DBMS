1.	CREATE SEQUENCE customer_seq START WITH 1 INCREMENT BY 1;
2.	SQL> CREATE SEQUENCE order_id_sequence START WITH 1 INCREMENT BY 1 NOCACHE   NOCYCLE;
3.	create sequence bill_id_sequence start with 1 increment by 1;
4.	create sequence rating_id_sequence start with 1 increment by 1;
5. SQL> CREATE OR REPLACE PROCEDURE calculate_total_revenue(p_total_revenue OUT NUMBER) IS
BEGIN
 SELECT SUM(amount) INTO p_total_revenue
FROM bill;
END;
6. CREATE OR REPLACE TRIGGER update_ingredient_trigger
AFTER INSERT ON orders
FOR EACH ROW
DECLARE
    -- Define variables for restock threshold and quantity
    l_restock_warning CONSTANT NUMBER := 5;
    l_restock_quantity CONSTANT NUMBER := 10;
BEGIN
    -- Loop through each ingredient associated with the ordered item
    FOR r_ingr IN (SELECT ingr_id FROM made_of WHERE item_id = :new.item_id) LOOP
        -- Update ingredient quantity
        UPDATE ingredient
        SET quantity = quantity - 1
        WHERE ingr_id = r_ingr.ingr_id;

        -- Check if quantity is below restock warning threshold
        DECLARE
            l_quantity NUMBER;
        BEGIN
            SELECT quantity INTO l_quantity
            FROM ingredient
            WHERE ingr_id = r_ingr.ingr_id;

            -- If below restock warning, restock ingredient quantity
            IF l_quantity < l_restock_warning THEN
                UPDATE ingredient
                SET quantity = l_restock_quantity
                WHERE ingr_id = r_ingr.ingr_id;
                DBMS_OUTPUT.PUT_LINE('Ingredient restocked for ingr_id: ' || r_ingr.ingr_id);
            END IF;
        END;
    END LOOP;
END;
/

